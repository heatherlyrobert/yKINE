.TH yKINE 5 2009-07 "linux" "heatherly custom tools manual"

.SH NAME
.B yKINE
\- structure of the kinematics scripting file

.SH PATRON
.B typhoeus-terrigena
(earth-born), king of all the greek the monsters

.SH IMAGERY (see HERITAGE in man section 7 for more)
winged giant with one-hundred dragon heads and viper coil tentacles

.SH SUMMARY
.BI yKINE
is a specialized, experimental, full-featured, and reliable spider kinematics
and scripting library designed to isolate the detailed mathmatics
from visualization, tactics, and strategy.

.SH DOCUMENTATION FILES
.nf
yKINE (3)          interfacing applications with yKINE
.nf
yKINE (5)    ***   structure of the kinematics scripting file
.nf
yKINE (7)          decision rationale, objectives, and overview

.SH LEG SPECIFICATION GRAMMAR
legs are specified with a two letter string that is then interpreted into
a specific scope.  working spiders are radially symmetrical, but have an
artificial sense of side (left/right) and rank (front/back) in order to
maintain a heading.  they will have six large legs and four small legs.
obviously this is not a general purpose robotic language as i am extremely
focused.

.SS examples of two-letter leg specifiers
.nf
   AA   all six large legs, none of the small ones
.nf
   RM   right, middle large leg
.nf
   l*   both left side, small legs

.SS side, first character in specifier
common (large legs only)
   L    left
   R    right
   A    all sides
.nf
useful (small legs only)
   l    left
   r    right
   a    all sides
.nf
uncommon (both large and small)
   Ö    left
   Õ    right
   *    all sides

.SS rank, second character in specifier
common (large legs only)
   F    front
   M    middle
   R    rear
   A    all ranks
.nf
useful (small legs only)
   f    front
   r    rear
   a    all ranks
.nf
uncommon (both large and small)
   Ó    front
   Ô    rear
   *    all ranks

.SH OUTWARD SPECIFICATION
outward is the distance a leg-tip will be placed relative to the body-center,
with zero-point being the military position.  the most common specification
is by a alpha code.  obviously, this scale is a kluge / placeholder while i am
experimenting and will be generalized in the future.

.SS letter code
.nf
 m     represents the military standard position
.nf
 each letter change represents a half-centimeter (5mm)
.nf
 <= l  is further under the body with "a" being unreachable
.nf
 >= n  is farther from the body with "z" being unreachable

.SS adjusters for letter codes
.nf
 -     means subtract a quarter unit (-1.25mm)
.nf
 +     means add a quarter unit (+1.25mm)
.nf
 '     means add a half unit (+2.5mm)

.SS numberic values
.nf
 the zero-point is standard military position
.nf
 negative values are further under the body (inward)
.nf
 positive values are farther from the body (outward)

.SH LEG POSITIONING
moving 3DF spider legs into specific coordinate positions is a daunting
challenge given that the body can also change position and orientation.
below are a series of verbs meant to significantly ease that burden by
encapsulating all the logic and calculations.

.SS verb inventory
.nf
forward    FK   specifies exact joint angles for a leg
.nf
inverse    IK   distance from the body-center
.nf
neighbor   NK   distance from the leg military position
.nf
tangent    TK   distance tangental from military position
.nf
stepwise   SK   distance in line with direction of travel
.nf
center     CK   angles relative to body-center for turning/circling
.nf
radial     RK   angles relative to leg-hip for stance positioning

.SS radial (RK)
radial kinematics provides a shorthand for artfully and gracefully repositioning
legs within coordinated stances -- it likely has limited general use.

EX: radial § <legs> § <dur> § <deg> § <out> § <y> §
   <legs>   : standard leg grammar (see LEG SPECS)
   <dur>    : standard duration grammar (see DURATION SPECS)
   <deg>    : relative to coxa angle (pos = CCW, neg = CW)
   <out>    : distance from military (see OUTWARD SPECS)
   <y>      : standard y specifier from body-center (see VERT SPECS)


.SH SCRIPTING
the purpose of scripting is to provide condensed, human maintainable input
that can translate into detailed actions in the system.

.B file formatting
   -- pure ascii text file, 7-bit safe
   -- eight fields per record

.B record formatting
   -- eight fields
   -- separated by standard ascii field separator character
   -- fields are standard width to make editing easier
   1) verb
   2) version
   3) servos
   8) arguments

.B servo references
    FORMAT     sp.segn
    s (side)   L=left  , R=right ,           a=all   , +=large , -=small
    p (pos)    F=front , M=middle, R=rear  , a=all   , +=large , -=small
    segment    thor = thorax     , coxa = coxa       , troc = trocanter  
               femu = femur      , pate = patella    , tibi = tibia
               meta = metatarsus , tars = tarsus     , foot = foot
               claw = claw       , magn = magnet     , hook = hook
    examples   LF.femu    = left-front leg's femur
               aF.femu    = femur on both front legs
               La.femu    = femurs on the left side
               aa.femu    = all femurs
               -F.femu    = femurs on the front small legs
               +F.femu    = femurs on the front large legs
               L-.femu    = femurs on the left small legs
               L+.femu    = femurs on the left large legs
               ++.femu    = femurs on all large legs
               --.femu    = femurs on all small legs

.B absolute servo position setting
   INIT       -b-  aa.femu    0.50  -85.0      -      -  -    
   servo      -b-  aa.femu    0.50  -85.0      -      -  -    

.B relative servo position setting
   forward    -a-  aa         0.00    0.0    0.0   90.0  -    

.B inverse kinematics
   ik_pure    -a-  LF.full    0.50  -20.0    0.0   30.0  -    

.B repeats
   SEGNO      -a-  aa.pate       -      -      -      -  -    
   DAL SEGNO  -b-  aa.pate       7      -      -      -  -    
   REPEAT     -b-  aa.tibi       7     10      -      -  -    

.B zero-point (center) adjustments
   ze_pure    -a-  aa         0.00    0.0    0.0   90.0  -    
   ze_from    -a-  aa         0.00    0.0    0.0   90.0  -    


.B inverse kinematics
   inverse     same as ik_pure (simple for automated scripting)
   ik_pure     establish single leg servo positions from tibia endpoint
   ik_from     use relative tibia endpoint numbers to the last saved position
   ik_save     save the last tibia endpoint for future manipulation



.SH SEE ALSO
this documentation is layered to provide easier navigation.
   yKINE (3), interfacing applications with yKINE
   yKINE (5), structure of the kinematics scripting file
   yKINE (7), decision rationale, objectives, and overview

.SH AUTHOR
jelloshrike at gmail dot com

.SH COLOPHON
this page is part of a documentation package meant to make use of the
heatherly tools easier and faster.


